<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

require_once( APPPATH.'/libraries/Facebook/HttpClients/FacebookHttpable.php' );
require_once( APPPATH.'/libraries/Facebook/HttpClients/FacebookCurl.php' );
require_once( APPPATH.'/libraries/Facebook/HttpClients/FacebookCurlHttpClient.php' );
 
require_once( APPPATH.'/libraries/Facebook/Entities/AccessToken.php' );
require_once( APPPATH.'/libraries/Facebook/Entities/SignedRequest.php' );
 
require_once( APPPATH.'/libraries/Facebook/FacebookSession.php' );
require_once( APPPATH.'/libraries/Facebook/FacebookRedirectLoginHelper.php' );
require_once( APPPATH.'/libraries/Facebook/FacebookRequest.php' );
require_once( APPPATH.'/libraries/Facebook/FacebookResponse.php' );
require_once( APPPATH.'/libraries/Facebook/FacebookSDKException.php' );
require_once( APPPATH.'/libraries/Facebook/FacebookRequestException.php' );
require_once( APPPATH.'/libraries/Facebook/FacebookOtherException.php' );
require_once( APPPATH.'/libraries/Facebook/FacebookAuthorizationException.php' );
require_once( APPPATH.'/libraries/Facebook/GraphObject.php' );
require_once( APPPATH.'/libraries/Facebook/GraphSessionInfo.php' );
 
use Facebook\HttpClients\FacebookHttpable;
use Facebook\HttpClients\FacebookCurl;
use Facebook\HttpClients\FacebookCurlHttpClient;
 
use Facebook\Entities\AccessToken;
use Facebook\Entities\SignedRequest;
 
use Facebook\FacebookSession;
use Facebook\FacebookRedirectLoginHelper;
use Facebook\FacebookRequest;
use Facebook\FacebookResponse;
use Facebook\FacebookSDKException;
use Facebook\FacebookRequestException;
use Facebook\FacebookOtherException;
use Facebook\FacebookAuthorizationException;
use Facebook\GraphObject;
use Facebook\GraphSessionInfo;

$GLOBALS['fbJson'] = '{"results":[';  //Global var for final JSON string to be returned
                                      //Initialize it with standard format
class Facebook extends CI_Model {

	/**
	 * Index Page for this controller.
	 *
	 * Maps to the following URL
	 * 		http://example.com/index.php/welcome
	 *	- or -  
	 * 		http://example.com/index.php/welcome/index
	 *	- or -
	 * Since this controller is set as the default controller in 
	 * config/routes.php, it's displayed at http://example.com/
	 *
	 * So any other public methods not prefixed with an underscore will
	 * map to /index.php/welcome/<method_name>
	 * @see http://codeigniter.com/user_guide/general/urls.html
	 */
         /*public function __construct() {
             parent::__construct();
             echo "This is generated by the __construct function!";
         }*/
    
    private function fbSession(){
        //Set facebook session and access token. 
        //IMPORTANT: ALWAYS include session_start() and all 'require_once's, as well the "use" calls
        session_start();
        FacebookSession::setDefaultApplication('829952907056927', '101eb0fb8c1edeaea38fbfb2c174b39e');
        
        $session = FacebookSession::newAppSession('829952907056927', '101eb0fb8c1edeaea38fbfb2c174b39e');
        
        try {  //check if established session and assigned token is valid.
            $session->validate();
        } catch (FacebookRequestException $ex) {
            // Session not valid, Graph API returned an exception with the reason.
            echo $ex->getMessage();
        } catch (\Exception $ex) {
            // Graph API returned info, but it may mismatch the current app or have expired.
            echo $ex->getMessage();
        }
      
        //echo $session->getToken();  //prints out current session token. OK
        return $session;
    }
    
    private function mapCategories(){ //each client category is matched with several fb/Graph API subcategories
        $fbCats = array(
            "Museum" => array("Historical Place", "Museum", "History Museum", "Art Museum"),
            "Sightseeing" => array("Monument", "Landmark", "Tours & Sightseeing", "Tourist Attraction", "Tour Guide"),
            "Theaters" => array("Theatre"),
            "Art" => array("Art Gallery", "Fairground", "Concert Venue"),
            "Spiritual Monuments" => array("Church", "Convent & Monastery"),
            "Education" => array("College & University"),
            "Entertainment" => array("Arts & Entertainment", "Theme Park"),
            "Parks" => array("Public Square", "Park"),
            "General" => array("Cultural Gifts Store", "Restaurant", "Hotel", "Hospital", "Nursing", "Food & Restaurant", "Beach", "Train Station", "Subway & Light Rail Station")
        );
        return $fbCats;
    }
    
    private function getCategories($fbCats, $categories){
        $cats = array();
        if($categories != NULL){
            //For each category given by the user get the corresponding categories from the fb/Graph API
            foreach($categories as $category){
                if(isset($fbCats[$category])){
                    foreach($fbCats[$category] as $subCat){  //To get final category list, get all matching subcategories
                        $cats[] = $subCat;
                    }
                }
            }
        }else{
            //If no client categories are specified, collect all appropriate fb/Graph API categories
            foreach($fbCats as $cat){
                foreach($cat as $subCat){
                    $cats[] = $subCat;
                }
            }
        }
        return $cats;
    }

    private function checkObj($s,$obj,$cats){
        //$s refers to each subcategory(if it exists)
        if(array_key_exists($s, $obj['category_list'])){ //check if the given object has such a subcategory
            $final = array();
            if(in_array($obj['category_list'][$s]["name"], $cats)){  //If given object's subcategory is 
                                //identical to one of the mapped/given categories, collect its info
                $final['name'] = $obj['name'];
                $final['lat'] = $obj['location']['latitude'];
                $final['long'] = $obj['location']['longitude'];
                if(array_key_exists('street', $obj['location']) && array_key_exists('city', $obj['location'])){
                    $final['address'] = $obj['location']['street'].', '.$obj['location']['city'];
                }
                $final['category'] = $obj['category_list'][$s]["name"];
                $final['source'] = "Facebook";
                $GLOBALS['fbJson'] = $GLOBALS['fbJson'].json_encode($final).","; //append JSON encoded object to final JSON string
                return true;
            }
        }
    }
    
    private function noCategoriesObj($s, $obj,$cats){  //Collect object's info, without filtering specific categories(collect from ALL categories)
        //$s refers to each subcategory(if it exists)
        if(array_key_exists($s, $obj['category_list'])){  //check if the given object has such a subcategory
            $final = array();
            if(in_array($obj['category_list'][$s]["name"], $cats)){  //If given object's subcategory is 
                                //identical to one of the mapped categories, collect its info
                $final['name'] = $obj['name'];
                $final['lat'] = $obj['location']['latitude'];
                $final['long'] = $obj['location']['longitude'];
                if(array_key_exists('street', $obj['location']) && array_key_exists('city', $obj['location'])){
                    //concatenate street and city to get full address
                    $final['address'] = $obj['location']['street'].', '.$obj['location']['city'];
                }
                $final['category'] = $obj['category_list'][$s]["name"];
                $final['source'] = "Facebook";
                $GLOBALS['fbJson'] = $GLOBALS['fbJson'].json_encode($final).","; //append JSON encoded object to final JSON string
                return true;
            }
        }
    }
    
    
    //Arguments will be passed dynamically by the basic REST controller handling the requests
    public function fbApi($town, $lat, $long, $categories){
        $fbCats = $this->mapCategories(); //Map client categories, with fb/Graph API categories
        $cats = $this->getCategories($fbCats, $categories);
        
        $session = $this->fbSession();
        $token = $session->getToken();
        //Make request
        try {
          //Set request parameters, depending on given arguments
          if($lat == NULL || $long == NULL){
              $params = array('access_token'=>$token, 'q'=>$town, 'type'=>'place');
          }else{
              $coords = $lat.",".$long;
              $params = array('access_token'=>$token, 'center'=>$coords, 'distance'=>'1000', 'type'=>'place');
          }
          
          //Get response
          $response = (new FacebookRequest($session, 'GET', '/search', $params))->execute();
          //Get response and decode-encode in json format
          $arrayResult = json_decode($response->getRawResponse(), true);
          $count = count($arrayResult['data']);
          
          //Traverse through results and filter based on category
          for($i=0; $i<$count; $i++){
            if($categories != NULL){
                //Check current object, to determine if it meets the user's request
                if($this->checkObj(0,$arrayResult['data'][$i],$cats)){
                    continue;  //In case the requested category is found dont' search for the remaining subcategroies
                }                      
                if($this->checkObj(1,$arrayResult['data'][$i],$cats)){
                    continue;
                }
                if($this->checkObj(2,$arrayResult['data'][$i],$cats)){
                    continue;
                }
            }else{
                //If no categories list is given, just check if current object's subcategories are in the general categories list
                if($this->noCategoriesObj(0,$arrayResult['data'][$i],$cats)){
                    continue;  //In case a valid category is found dont' search for the remaining subcategroies
                }
                if($this->noCategoriesObj(1,$arrayResult['data'][$i],$cats)){
                    continue;
                }
                if($this->noCategoriesObj(2,$arrayResult['data'][$i],$cats)){
                    continue;
                }
            }
          }
          $len = strlen($GLOBALS['fbJson']);  
          $GLOBALS['fbJson'][$len-1] = "]";    //Remove last ',' character from final JSON string
          $GLOBALS['fbJson'] = $GLOBALS['fbJson']."}";  //Finalize JSON string and return it
          //echo $GLOBALS['fbJson'];
          return $GLOBALS['fbJson'];
        } catch (FacebookRequestException $ex) {
          echo $ex->getMessage();
        } catch (\Exception $ex) {
          echo $ex->getMessage();
        }
    }
}