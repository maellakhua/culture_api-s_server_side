<?php

if (!defined('BASEPATH')) exit('No direct script access allowed');

require APPPATH . '/libraries/REST_Controller.php';

class Crawl_apis extends REST_Controller {

    /**
     * Index Page for this controller.
     *
     * Maps to the following URL
     * 		http://example.com/index.php/welcome
     * 	- or -  
     * 		http://example.com/index.php/welcome/index
     * 	- or -
     * Since this controller is set as the default controller in 
     * config/routes.php, it's displayed at http://example.com/
     *
     * So any other public methods not prefixed with an underscore will
     * map to /index.php/welcome/<method_name>
     * @see http://codeigniter.com/user_guide/general/urls.html
     */
    /* public function __construct() {
      parent::__construct();
      echo "This is generated by the __construct function!";
      } */

    public function index() {
        $this->load->view('welcome_message');
    }
    
    private function collectApiData($town, $lat, $long, $categories){
        //{results:[{obje1},{obj2]}}
        //Get json encoded results from each individual API
        $this->load->model("facebook");
        $fbJson = $this->facebook->fbApi($town, $lat, $long, $categories);
        $fb_decoded = json_decode($fbJson);
        $this->load->model("Foursquaremodel");
        $fsqJson = $this->Foursquaremodel->foursquare($town, $lat, $long, $categories);
        $fsq_decoded = json_decode($fsqJson);
        $this->load->model("googleplus");
        $googleJson = $this->googleplus->index($town, $lat, $long, $categories);
        $ggl_decoded = json_decode($googleJson);
        //Merge all decoded jsons into a single array, and re-encode
        //var_dump($fb_decoded);
        if($fb_decoded == NULL){  //If Facebook API hasn't returned any results
            if($fsq_decoded == NULL && $ggl_decoded != NULL){
                $final_decoded = array_merge($ggl_decoded->results);
            }else if($fsq_decoded != NULL && $ggl_decoded == NULL){
                $final_decoded = array_merge($fsq_decoded->results);
            }else{
                $final_decoded = array_merge($fsq_decoded->results, $ggl_decoded->results);
            }
        }
        if($fsq_decoded == NULL){  //If Foursquare API hasn't returned any results
            if($fb_decoded == NULL && $ggl_decoded != NULL){
                $final_decoded = array_merge($ggl_decoded->results);
            }else if($fb_decoded != NULL && $ggl_decoded == NULL){
                $final_decoded = array_merge($fb_decoded->results);
            }else{
                $final_decoded = array_merge($fb_decoded->results, $ggl_decoded->results);
            }
        }
        if($ggl_decoded == NULL){  //If Google+ API hasn't returned any results
            if($fb_decoded == NULL && $fsq_decoded != NULL){
                $final_decoded = array_merge($fsq_decoded->results);
            }else if($fb_decoded != NULL && $fsq_decoded == NULL){
                $final_decoded = array_merge($fb_decoded->results);
            }else{
                $final_decoded = array_merge($fb_decoded->results, $fsq_decoded->results);
            }
        }
        if($fb_decoded != NULL && $fsq_decoded != NULL && $ggl_decoded != NULL){  //If all APIs have returned results, collect data from all
            $final_decoded = array_merge($fb_decoded->results, $fsq_decoded->results, $ggl_decoded->results);
        }
        
        $finalJson = '{"results":'.json_encode($final_decoded).'}';
        echo $finalJson;
        return $finalJson;
        
    }
    
    public function data_get(){
        
        header('content-type: application/json; charset=utf-8');
        header("access-control-allow-origin: *");
        
        if($this->get('categories')){
            $categories = explode("_", $this->get('categories'));
        }else{
            $categories = NULL;
        }
        
        if (!$this->get('lat') || !$this->get('long')) {
            if (!$this->get('town')) {
                $this->response(NULL, 400);
            } else {
                $this->collectApiData($this->get('town'), NULL, NULL, $categories);
            }
        }else{
            $this->collectApiData(NULL, $this->get('lat'), $this->get('long'), $categories);
        }
        
        
    }

}
