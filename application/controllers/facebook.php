<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

require_once( 'Facebook/HttpClients/FacebookHttpable.php' );
require_once( 'Facebook/HttpClients/FacebookCurl.php' );
require_once( 'Facebook/HttpClients/FacebookCurlHttpClient.php' );
 
require_once( 'Facebook/Entities/AccessToken.php' );
require_once( 'Facebook/Entities/SignedRequest.php' );
 
require_once( 'Facebook/FacebookSession.php' );
require_once( 'Facebook/FacebookRedirectLoginHelper.php' );
require_once( 'Facebook/FacebookRequest.php' );
require_once( 'Facebook/FacebookResponse.php' );
require_once( 'Facebook/FacebookSDKException.php' );
require_once( 'Facebook/FacebookRequestException.php' );
require_once( 'Facebook/FacebookOtherException.php' );
require_once( 'Facebook/FacebookAuthorizationException.php' );
require_once( 'Facebook/GraphObject.php' );
require_once( 'Facebook/GraphSessionInfo.php' );
 
use Facebook\HttpClients\FacebookHttpable;
use Facebook\HttpClients\FacebookCurl;
use Facebook\HttpClients\FacebookCurlHttpClient;
 
use Facebook\Entities\AccessToken;
use Facebook\Entities\SignedRequest;
 
use Facebook\FacebookSession;
use Facebook\FacebookRedirectLoginHelper;
use Facebook\FacebookRequest;
use Facebook\FacebookResponse;
use Facebook\FacebookSDKException;
use Facebook\FacebookRequestException;
use Facebook\FacebookOtherException;
use Facebook\FacebookAuthorizationException;
use Facebook\GraphObject;
use Facebook\GraphSessionInfo;

class Facebook extends CI_Controller {

	/**
	 * Index Page for this controller.
	 *
	 * Maps to the following URL
	 * 		http://example.com/index.php/welcome
	 *	- or -  
	 * 		http://example.com/index.php/welcome/index
	 *	- or -
	 * Since this controller is set as the default controller in 
	 * config/routes.php, it's displayed at http://example.com/
	 *
	 * So any other public methods not prefixed with an underscore will
	 * map to /index.php/welcome/<method_name>
	 * @see http://codeigniter.com/user_guide/general/urls.html
	 */
         /*public function __construct() {
             parent::__construct();
             echo "This is generated by the __construct function!";
         }*/
    
    private function fbSession(){
        //Set facebook session and access token. 
        //IMPORTANT: ALWAYS include session_start() and all 'require_once's, as well the "use" calls
        session_start();
        FacebookSession::setDefaultApplication('829952907056927', '101eb0fb8c1edeaea38fbfb2c174b39e');
        
        $session = FacebookSession::newAppSession('829952907056927', '101eb0fb8c1edeaea38fbfb2c174b39e');
        
        try {  //check if established session and assigned token is valid.
            $session->validate();
        } catch (FacebookRequestException $ex) {
            // Session not valid, Graph API returned an exception with the reason.
            echo $ex->getMessage();
        } catch (\Exception $ex) {
            // Graph API returned info, but it may mismatch the current app or have expired.
            echo $ex->getMessage();
        }
      
        //echo $session->getToken();  //prints out current session token. OK
        return $session;
    }
    
    private function mapCategories(){
        $cats = array(
            "Museum" => "Historical Place",
            "" => "Monument",
            "" => "Tours & Sightseeing",
            "" => "Theatre",
            "" => "Tourist Attraction",
            "Arts" => "Arts & Entertainment",
            "" => "Fairground",
            "" => "Church",
            "" => "College & University",
            "" => "Concert Venue",
            "" => "Public Square",
            "" => "Theme Park",
            "" => "Landmark",
            "" => "Park",
            "Arts" => "Art Gallery",
            "" => "Tour Guide",
            "Shop" => "Cultural Gifts Store",
            "Museum" => "Museum"
        );
        return $cats;
    }
    
    private function getCategories($fbCats, $categories){
        $cats = array();
        //For each category given by the user get the corresponding categories from the fb/Graph API
        foreach($categories as $category){
            if(isset($fbCats[$category])){
                $cats[] = $fbCats[$category];
            }
        }
        return $cats;
    }

    private function checkObj($s,$obj,$cats){
        //$s refers to each subcategory(if it exists)
        if(array_key_exists($s, $obj['category_list'])){ //check if the given object has such a subcategory
            $final = array();
            if(in_array($obj['category_list'][$s]["name"], $cats)){  //If given object's subcategory is 
                                //identical to one of the mapped/given categories, collect its info
                //TODO: create function to create object and pass as arg -> $arrayResult['data'][$i]
                $final['name'] = $obj['name'];
                $final['lat'] = $obj['location']['latitude'];
                $final['long'] = $obj['location']['longitude'];
                if(array_key_exists('street', $obj['location']) && array_key_exists('city', $obj['location'])){
                    //concatenate street and city to get full address
                    $final['address'] = $obj['location']['street'].', '.$obj['location']['city'];
                }
                $final['category'] = $obj['category_list'][$s]["name"];
                $final['source'] = "Facebook";
                echo json_encode($final)."<br><br>";
                //print_r($final);
                return $final;
            }
        }
    }
    
    public function fbApi($town = "athens", $lat=NULL, $long=NULL, $categories = array(0=>'Museum', 1=>'Shop', 2=>'Arts')){
        $fbCats = $this->mapCategories(); //Map client categories, with fb/Graph API categories
        $cats = $this->getCategories($fbCats, $categories);
        
        $session = $this->fbSession();
        $token = $session->getToken();
        //Make request
        try {
          //Set request parameters, depending on given arguments
          if($lat == NULL || $long == NULL){
              echo "Town param passed!<br>";
              $params = array('access_token'=>$token, 'q'=>$town, 'type'=>'place');
          }else{
              echo "Lat and long params passed!<br>";
              $coords = $lat.",".$long;
              echo $coords."<br>";
              $params = array('access_token'=>$token, 'center'=>$coords, 'distance'=>'1000', 'type'=>'place');
          }
          
          //Execute repsonse
          $response = (new FacebookRequest($session, 'GET', '/search', $params))->execute();
          //Get response and decode-encode in json format
          $arrayResult = json_decode($response->getRawResponse(), true);
          //echo json_encode($arrayResult['data']);  //Print whole response in json format
          $count = count($arrayResult['data']);
          
          //Traverse through results and filter based on category
          for($i=0; $i<$count; $i++){
              //Check current object, to determine if it meets the user's request
              $final = $this->checkObj(0,$arrayResult['data'][$i],$cats);
              $final = $this->checkObj(1,$arrayResult['data'][$i],$cats);
              $final = $this->checkObj(2,$arrayResult['data'][$i],$cats);
          }
          /*for($i=0; $i<$count; $i++){
              //***TODO***:::Instead of echoing properties, create an object
              //echo $arrayResult['data'][$i]['name'];
              if(array_key_exists(0, $arrayResult['data'][$i]['category_list'])){
                  echo json_encode($arrayResult['data'][$i]['category_list'][0]);
              }
              if(array_key_exists(1, $arrayResult['data'][$i]['category_list'])){
                  echo json_encode($arrayResult['data'][$i]['category_list'][1]);
              }
              if(array_key_exists(2, $arrayResult['data'][$i]['category_list'])){
                  echo json_encode($arrayResult['data'][$i]['category_list'][2]);
              }
              echo $arrayResult['data'][$i]['location']['longitude']." ";
              echo $arrayResult['data'][$i]['location']['latitude'];
              echo "<br><br>";
          }*/
        } catch (FacebookRequestException $ex) {
          echo $ex->getMessage();
        } catch (\Exception $ex) {
          echo $ex->getMessage();
        }
    }
}